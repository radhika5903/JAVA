package oops;

import java.util.*;


public class levelordering_in_binary_tree {
	static class Node{
		int data;
		Node right;
		Node left;
		
		Node(int data){
			this.data=data;
			this.left=null;
			this.right=null;
		}
	}
	static class binarytree{
		static int idx=-1;
		public static Node buildtree(int Nodes[]) {
			idx++;
			if(Nodes[idx]==-1) {
				return null;
			}
			Node newNode=new Node(Nodes[idx]);
			newNode.left=buildtree(Nodes);
			newNode.right=buildtree(Nodes);
			return newNode;
			
		}
		
	}
	public static void preorder(Node root) {
		if(root==null) {
			return;
		}
		System.out.print(root.data+" ");
		preorder(root.left);
		preorder(root.right);
		
	}
	public static void inorder(Node root) {
		if(root == null) {
			return;
		}
		inorder(root.left);
		System.out.print(root.data+" ");
		inorder(root.right);
		
	}
	public static void postorder(Node root) {
		if(root == null) {
			return;
		}
		postorder(root.left);
		postorder(root.right);
		System.out.print(root.data+" ");
	}
	public static void levelordering(Node root) {
		if(root==null) {
			return;
		}
		Queue<Node> q= new LinkedList<>();
		q.add(root); // Add the root node to the queue
	    q.add(null);
		while(!q.isEmpty()) {
			Node cuurentNod=q.remove();
			if(cuurentNod==null) {
				System.out.println();
				if(q.isEmpty()) {
					break;
				}
				else {
					q.add(null);
				}
			}
			else {
				System.out.print(cuurentNod.data+" ");
				if(cuurentNod.left !=null) {
					q.add(cuurentNod.left);
				}
				if(cuurentNod.right !=null){
					q.add(cuurentNod.right);
				}
				
			}
		}
	}

	public static void main(String[] args) {
		
		
		// TODO Auto-generated method stub
		int Nodes[]= {1,2,4,-1,-1,5,-1,-1,3,-1,6,-1,-1};
		binarytree bv=new binarytree();
		Node root=bv.buildtree(Nodes);
		levelordering(root);

	}

}